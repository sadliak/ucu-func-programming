type: edu
files:
- name: src/ImageFilteringTask.scala
  visible: true
  placeholders:
  - offset: 205
    length: 3
    placeholder_text: ???
    initial_state:
      length: 3
      offset: 205
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      {
          FilteringTask(filter(imageData), windowSize, 0, imageData(0).length, 0, imageData.length)()
        }


        case class FilteringTask(filter: (Int, Int) => Int, windowSize: Int, collStart: Int, collEnd: Int, rowStart: Int, rowEnd: Int) extends RecursiveTask[Array[Array[Int]]] {

          def apply(): Array[Array[Int]] = {
            val rowCnt = rowEnd - rowStart
            val collCnt = collEnd - collStart

            if (collCnt <= windowSize && rowCnt <= windowSize) {
              Array.tabulate[Int](rowCnt, collCnt)((row, coll) => filter(rowStart + row, collStart + coll))
            } else if (rowCnt > windowSize) {
              val partSize = rowCnt / 2

              val asyncSubtask = FilteringTask(filter, windowSize, collStart, collEnd, rowStart + partSize, rowEnd).fork()
              Array.concat(
                FilteringTask(filter, windowSize, collStart, collEnd, rowStart, rowStart + partSize)(),
                asyncSubtask.join()
              )
            } else {
              val partSize = collCnt / 2

              val asyncSubtask = FilteringTask(filter, windowSize, collStart + partSize, collEnd, rowStart, rowEnd).fork()

              val part1Result = FilteringTask(filter, windowSize, collStart, collStart + partSize, rowStart, rowEnd)()
              val part2Result = asyncSubtask.join()

              for (i <- 0 until rowCnt)
                part1Result.update(i, Array.concat(part1Result(i), part2Result(i)))

              part1Result
            }
          }

          override def compute(): Array[Array[Int]] = apply()
        }
  text: |-
    import java.util.concurrent.RecursiveTask

    object ImageFilteringTask {
      def filterImage(filter: Array[Array[Int]] => (Int, Int) => Int, windowSize: Int)(imageData: Array[Array[Int]]): Array[Array[Int]] = ???

    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |
    scalaSource in Compile := baseDirectory.value / "src"
    scalaSource in Test := baseDirectory.value / "test"
    libraryDependencies += "org.scalatest" %% "scalatest" % "3.2.3"
  learner_created: false
- name: test/ImageProcessingTestSpec.scala
  visible: false
  text: |
    import ImageFilteringTask.filterImage
    import org.scalatest.funsuite.AnyFunSuite

    import java.util

    class ImageProcessingTestSpec extends AnyFunSuite {

      val filter: Array[Array[Int]] => Array[Array[Int]] = filterImage(source => (row, coll) => {
        if (row - 1 < 0 || coll - 1 < 0 || row + 1 >= source.length || coll + 1 >= source(0).length) {
          0
        } else {
          (for (i <- row - 1 to row + 1) yield (for (j <- coll - 1 to coll + 1) yield source(i)(j)).sum).sum / 9
        }
      }, 3)

      test("Should process correctly case 9x9") {
        val result: Array[Array[Int]] = filter(Array(
          Array(10, 1, 1, 1, 1, 10, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 10),
          Array(1, 1, 1, 10, 1, 1, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 1),
          Array(10, 1, 1, 1, 1, 1, 10, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 1),
          Array(1, 1, 10, 1, 1, 10, 1, 1, 10),
        ))

        val expected: Array[Array[Int]] = Array(
          Array(0, 0, 0, 0, 0, 0, 0, 0, 0),
          Array(0, 2, 1, 1, 2, 2, 2, 2, 0),
          Array(0, 1, 2, 2, 2, 1, 1, 2, 0),
          Array(0, 1, 2, 2, 2, 1, 1, 2, 0),
          Array(0, 2, 2, 2, 2, 2, 2, 2, 0),
          Array(0, 2, 1, 1, 1, 2, 2, 2, 0),
          Array(0, 2, 1, 1, 1, 2, 2, 2, 0),
          Array(0, 2, 2, 2, 2, 2, 2, 2, 0),
          Array(0, 0, 0, 0, 0, 0, 0, 0, 0),
        )
        assert(util.Arrays.deepEquals(result.asInstanceOf[Array[AnyRef]], expected.asInstanceOf[Array[AnyRef]]), "Should process correctly")
      }

      test("Should process correctly case 7x9") {
        val result: Array[Array[Int]] = filter(Array(
          Array(10, 1, 1, 1, 1, 10, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 10),
          Array(1, 1, 1, 10, 1, 1, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 1),
          Array(10, 1, 1, 1, 1, 1, 10, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1, 1, 1),
        ))

        val expected: Array[Array[Int]] = Array(
          Array(0, 0, 0, 0, 0, 0, 0, 0, 0),
          Array(0, 2, 1, 1, 2, 2, 2, 2, 0),
          Array(0, 1, 2, 2, 2, 1, 1, 2, 0),
          Array(0, 1, 2, 2, 2, 1, 1, 2, 0),
          Array(0, 2, 2, 2, 2, 2, 2, 2, 0),
          Array(0, 2, 1, 1, 1, 2, 2, 2, 0),
          Array(0, 0, 0, 0, 0, 0, 0, 0, 0),
        )
        assert(util.Arrays.deepEquals(result.asInstanceOf[Array[AnyRef]], expected.asInstanceOf[Array[AnyRef]]), "Should process correctly")
      }

      test("Should process correctly case 9x7") {
        val result: Array[Array[Int]] = filter(Array(
          Array(10, 1, 1, 1, 1, 10, 1),
          Array(1, 1, 1, 1, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1),
          Array(1, 1, 1, 10, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1),
          Array(10, 1, 1, 1, 1, 1, 10),
          Array(1, 1, 1, 1, 1, 1, 1),
          Array(1, 1, 1, 1, 1, 1, 1),
          Array(1, 1, 10, 1, 1, 10, 1),
        ))

        val expected: Array[Array[Int]] = Array(
          Array(0, 0, 0, 0, 0, 0, 0),
          Array(0, 2, 1, 1, 2, 2, 0),
          Array(0, 1, 2, 2, 2, 1, 0),
          Array(0, 1, 2, 2, 2, 1, 0),
          Array(0, 2, 2, 2, 2, 2, 0),
          Array(0, 2, 1, 1, 1, 2, 0),
          Array(0, 2, 1, 1, 1, 2, 0),
          Array(0, 2, 2, 2, 2, 2, 0),
          Array(0, 0, 0, 0, 0, 0, 0),
        )
        assert(util.Arrays.deepEquals(result.asInstanceOf[Array[AnyRef]], expected.asInstanceOf[Array[AnyRef]]), "Should process correctly")
      }
    }
  learner_created: false
- name: tmp26dc134_thumb.png
  visible: false
  learner_created: false
- name: img.png
  visible: false
  learner_created: false
status: Unchecked
record: -1

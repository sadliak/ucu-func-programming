type: edu
files:
- name: src/FlattingTask.scala
  visible: true
  placeholders:
  - offset: 84
    length: 37
    placeholder_text: ???
    initial_state:
      length: 3
      offset: 84
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      strings.flatMap(word => word.chars().toArray)
            .map(_.toChar)
  text: |-
    object FlattingTask {

      def flattingStrings(strings: Seq[String]): Seq[Char] =
        ???
    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |
    scalaSource in Compile := baseDirectory.value / "src"
    scalaSource in Test := baseDirectory.value / "test"
    libraryDependencies += "org.scalatest" %% "scalatest" % "3.2.3"
  learner_created: false
- name: test/TestSpecFlatting.scala
  visible: false
  text: |
    import FlattingTask.flattingStrings
    import org.scalatest.funsuite.AnyFunSuite

    class TestSpecFlatting extends AnyFunSuite {
      test("Should flatten words into chars") {
        assert(
          flattingStrings(List("abc", "def", "ghj", "klm", "nop"))
            ==
            List('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'o', 'p'),
          "Expected flatting into List('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'o', 'p')")
      }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 21 Oct 2021 20:16:15 UTC
record: -1
